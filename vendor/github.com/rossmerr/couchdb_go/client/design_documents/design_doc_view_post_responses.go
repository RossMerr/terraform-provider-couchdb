// Code generated by go-swagger; DO NOT EDIT.

package design_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rossmerr/couchdb_go/models"
)

// DesignDocViewPostReader is a Reader for the DesignDocViewPost structure.
type DesignDocViewPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DesignDocViewPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDesignDocViewPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewDesignDocViewPostNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewDesignDocViewPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDesignDocViewPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDesignDocViewPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDesignDocViewPostOK creates a DesignDocViewPostOK with default headers values
func NewDesignDocViewPostOK() *DesignDocViewPostOK {
	return &DesignDocViewPostOK{}
}

/*DesignDocViewPostOK handles this case with default header values.

Request completed successfully
*/
type DesignDocViewPostOK struct {
	/*Response signature
	 */
	ETag string
	/*chunked
	 */
	TransferEncoding string

	Payload *models.Pagination
}

func (o *DesignDocViewPostOK) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designDocViewPostOK  %+v", 200, o.Payload)
}

func (o *DesignDocViewPostOK) GetPayload() *models.Pagination {
	return o.Payload
}

func (o *DesignDocViewPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Transfer-Encoding
	o.TransferEncoding = response.GetHeader("Transfer-Encoding")

	o.Payload = new(models.Pagination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignDocViewPostNotModified creates a DesignDocViewPostNotModified with default headers values
func NewDesignDocViewPostNotModified() *DesignDocViewPostNotModified {
	return &DesignDocViewPostNotModified{}
}

/*DesignDocViewPostNotModified handles this case with default header values.

Document wasnâ€™t modified since specified revision
*/
type DesignDocViewPostNotModified struct {
}

func (o *DesignDocViewPostNotModified) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designDocViewPostNotModified ", 304)
}

func (o *DesignDocViewPostNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDesignDocViewPostBadRequest creates a DesignDocViewPostBadRequest with default headers values
func NewDesignDocViewPostBadRequest() *DesignDocViewPostBadRequest {
	return &DesignDocViewPostBadRequest{}
}

/*DesignDocViewPostBadRequest handles this case with default header values.

Invalid request
*/
type DesignDocViewPostBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DesignDocViewPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designDocViewPostBadRequest  %+v", 400, o.Payload)
}

func (o *DesignDocViewPostBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignDocViewPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignDocViewPostUnauthorized creates a DesignDocViewPostUnauthorized with default headers values
func NewDesignDocViewPostUnauthorized() *DesignDocViewPostUnauthorized {
	return &DesignDocViewPostUnauthorized{}
}

/*DesignDocViewPostUnauthorized handles this case with default header values.

Read permission required
*/
type DesignDocViewPostUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DesignDocViewPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designDocViewPostUnauthorized  %+v", 401, o.Payload)
}

func (o *DesignDocViewPostUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignDocViewPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignDocViewPostNotFound creates a DesignDocViewPostNotFound with default headers values
func NewDesignDocViewPostNotFound() *DesignDocViewPostNotFound {
	return &DesignDocViewPostNotFound{}
}

/*DesignDocViewPostNotFound handles this case with default header values.

Specified database, design document or view is missed
*/
type DesignDocViewPostNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DesignDocViewPostNotFound) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designDocViewPostNotFound  %+v", 404, o.Payload)
}

func (o *DesignDocViewPostNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignDocViewPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
