// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewIndex view index
//
// swagger:model ViewIndex
type ViewIndex struct {

	// Indicates whether a compaction routine is currently running on the view
	CompactRunning bool `json:"compact_running,omitempty"`

	// Language for the defined views
	Language string `json:"language,omitempty"`

	// The purge sequence that has been processed
	PurgeSeq int64 `json:"purge_seq,omitempty"`

	// MD5 signature of the views for the design document
	Signature string `json:"signature,omitempty"`

	// sizes
	Sizes *ViewIndexSizes `json:"sizes,omitempty"`

	// The update sequence of the corresponding database that has been indexed
	UpdateSeq string `json:"update_seq,omitempty"`

	// Indicates if the view is currently being updated
	UpdaterRunning bool `json:"updater_running,omitempty"`

	// Number of clients waiting on views from this design document
	WaitingClients int64 `json:"waiting_clients,omitempty"`

	// Indicates if there are outstanding commits to the underlying database that need to processed
	WaitingCommit bool `json:"waiting_commit,omitempty"`
}

// Validate validates this view index
func (m *ViewIndex) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSizes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewIndex) validateSizes(formats strfmt.Registry) error {

	if swag.IsZero(m.Sizes) { // not required
		return nil
	}

	if m.Sizes != nil {
		if err := m.Sizes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sizes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewIndex) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewIndex) UnmarshalBinary(b []byte) error {
	var res ViewIndex
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ViewIndexSizes view index sizes
//
// swagger:model ViewIndexSizes
type ViewIndexSizes struct {

	// The size of live data inside the view, in bytes
	Active int64 `json:"active,omitempty"`

	// Size in bytes of the view as stored on disk
	Disk int64 `json:"disk,omitempty"`

	// The uncompressed size of view contents in bytes
	External int64 `json:"external,omitempty"`
}

// Validate validates this view index sizes
func (m *ViewIndexSizes) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewIndexSizes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewIndexSizes) UnmarshalBinary(b []byte) error {
	var res ViewIndexSizes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
